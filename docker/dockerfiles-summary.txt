Documentation Dockerfiles — Projet gig-benchmark

Ce document résume les choix techniques et les explications pour chaque Dockerfile du projet.

--------------------------------------------------------------------
docker/web.Dockerfile — Symfony + Apache/PHP 8.2

Base
- Image : php:8.2-apache
- Pourquoi :
  - Version stable et massivement supportée par Symfony.
  - Apache intégré pour simplicité locale (DocumentRoot configurable).

Paquets système
- git, unzip : nécessaires pour Composer.
- libicu-dev : permet l’extension intl (i18n, dates, locales).
- libzip-dev : nécessaire pour l’extension zip.

Extensions PHP
- pdo_mysql : connexion MySQL/MariaDB (Doctrine).
- intl : gestion des locales, formats, tri.
- zip : archives, utilisé par Composer et certains bundles.
- opcache : performances (cache bytecode PHP).

Apache
- rewrite : indispensable pour router toutes les requêtes vers public/index.php.
- headers : utile pour gérer des headers HTTP de sécurité.
- DocumentRoot défini sur /public → sécurité.

Autres points
- Composer copié depuis l’image officielle → reproductibilité.
- User www-data utilisé pour exécuter Apache → sécurité + compatibilité Symfony.
- Expose 80 → port HTTP par défaut.

--------------------------------------------------------------------
docker/scraper.Dockerfile — Scraper Python 3.11

Base
- Image : python:3.11-slim
- Pourquoi :
  - Très stable et largement supportée par l’écosystème scraping.
  - Variante slim = compatibilité Debian mais image plus légère.

Paquets système
- build-essential : compilation d’extensions natives.
- libxml2-dev, libxslt1-dev : requis pour lxml (HTML/XML parsing).
- libffi-dev : requis par libs cryptographiques (ex: cryptography).
- curl, ca-certificates : nécessaires pour télécharger en HTTPS.
- Nettoyage des index apt → image plus légère.

Utilisateur
- Création d’un user appuser non-root → sécurité (moindre privilège).

Workflow
1. WORKDIR /app
2. Copie requirements.txt en premier (cache build).
3. Installation des dépendances avec pip install --no-cache-dir.
4. Copie du reste du code.
5. CMD par défaut → python app.py

Bonnes pratiques
- Installation deps avant le code → builds plus rapides.
- Non-root user → sécurité.
- --no-cache-dir → image plus légère.
- Commande override possible via docker-compose.yml.

--------------------------------------------------------------------
Points clés globaux

- Les Dockerfiles figent l’environnement technique → reproductible en dev/CI/prod.
- Versions choisies : PHP 8.2, Python 3.11 slim → compromis stabilité/perf/support.
- Bonnes pratiques :
  - Non-root user pour sécurité.
  - Nettoyage caches apt/pip.
  - Séparation requirements/code pour profiter du cache Docker.
  - DocumentRoot /public en Symfony → sécurité accrue.


